p.best = subset(df.solutions, 'seed' == seed.best)
seed.best = 1
p.best = subset(df.solutions, 'seed' == seed.best)
p.best
seed.best = 1
p.best = subset(df.solutions, seed == seed.best)
p.best
seed.best = 1
df.best = subset(df.solutions, seed == seed.best)
ggplot(df.best, aes(x = x1, y = x2, group = vehicle, color = vechicle))+
geon_path()
seed.best = 1
df.best = subset(df.solutions, seed == seed.best)
ggplot(df.best, aes(x = x1, y = x2, group = vehicle, color = vechicle))+
geom_path()
seed.best = 1
df.best = subset(df.solutions, seed == seed.best)
ggplot(df.best, aes(x = x1, y = x2, group = vehicle, color = vehicle))+
geom_path()
seed.best = 1
df.best = subset(df.solutions, seed == seed.best)
ggplot(df.best, aes(x = x1, y = x2, group = vehicle, color = factor(vehicle, levels = 1:3))+
geom_path()
seed.best = 1
df.best = subset(df.solutions, seed == seed.best)
ggplot(df.best, aes(x = x1, y = x2, group = vehicle, color = factor(vehicle, levels = 1:3)))+
geom_path()
n = 2
N = 3
T = 30
D = 0.4
# initial and final positions
p1init = matrix(c(-1,0), 1, 2)
p2init = matrix(c(-1,0.5), 1, 2)
p3init = matrix(c(-1,1), 1, 2)
p1final = matrix(c(1,0), 1, 2)
p2final = matrix(c(1,-0.5), 1, 2)
p3final = matrix(c(1,-1), 1, 2)
update = function(p1, p2, p3){
p1.var = Variable(T, 2)
p2.var = Variable(T, 2)
p3.var = Variable(T, 2)
objective = sum_squares(A %*% p1.var) +
sum_squares(A %*% p2.var) +
sum_squares(A %*% p3.var)
constraints = list(p1.var[1,] == p1init,
p2.var[1,] == p2init,
p3.var[1,] == p3init,
p1.var[T,] == p1final,
p2.var[T,] == p2final,
p3.var[T,] == p3final,
matrix(rowSums((p1 - p2) ^ 2))[c(-1, -T),] +
2 * diag((p1 - p2) %*% t(p1.var - p2.var - p1 + p2))[c(-1, -T),] >= D^2,
matrix(rowSums((p2 - p3) ^ 2))[c(-1, -T),] +
2 * diag((p2 - p3) %*% t(p2.var - p3.var - p2 + p3))[c(-1, -T),] >= D^2,
matrix(rowSums((p3 - p1) ^ 2))[c(-1, -T), ] +
2 * diag((p3 - p1) %*% t(p3.var - p1.var - p3 + p1))[c(-1, -T),] >= D^2)
problem = Problem(Minimize(objective), constraints)
solution = solve(problem)
p1 = solution$getValue(p1.var)
p2 = solution$getValue(p2.var)
p3 = solution$getValue(p3.var)
return(list(p1 = p1, p2 = p2, p3 = p3))
}
df.best
seed.best = 1
df.best = subset(df.solutions, seed == seed.best)
n = 2
N = 3
T = 30
D = 0.4
# initial and final positions
p1init = matrix(c(-1,0), 1, 2)
p2init = matrix(c(-1,0.5), 1, 2)
p3init = matrix(c(-1,1), 1, 2)
p1final = matrix(c(1,0), 1, 2)
p2final = matrix(c(1,-0.5), 1, 2)
p3final = matrix(c(1,-1), 1, 2)
update = function(p1, p2, p3){
p1.var = Variable(T, 2)
p2.var = Variable(T, 2)
p3.var = Variable(T, 2)
objective = sum_squares(A %*% p1.var) +
sum_squares(A %*% p2.var) +
sum_squares(A %*% p3.var)
constraints = list(p1.var[1,] == p1init,
p2.var[1,] == p2init,
p3.var[1,] == p3init,
p1.var[T,] == p1final,
p2.var[T,] == p2final,
p3.var[T,] == p3final,
matrix(rowSums((p1 - p2) ^ 2))[c(-1, -T),] +
2 * diag((p1 - p2) %*% t(p1.var - p2.var - p1 + p2))[c(-1, -T),] >= D^2,
matrix(rowSums((p2 - p3) ^ 2))[c(-1, -T),] +
2 * diag((p2 - p3) %*% t(p2.var - p3.var - p2 + p3))[c(-1, -T),] >= D^2,
matrix(rowSums((p3 - p1) ^ 2))[c(-1, -T), ] +
2 * diag((p3 - p1) %*% t(p3.var - p1.var - p3 + p1))[c(-1, -T),] >= D^2)
problem = Problem(Minimize(objective), constraints)
solution = solve(problem)
p1 = solution$getValue(p1.var)
p2 = solution$getValue(p2.var)
p3 = solution$getValue(p3.var)
return(list(p1 = p1, p2 = p2, p3 = p3))
}
loss = function(p1, p2, p3){
return(sum((A %*% p1)^2) + sum((A %*% p2)^2) + sum((A %*% p3)^2))
}
a.constraint = function(p1, p2, p3){
c12 = sqrt(rowSums((p1 - p2) ^ 2))
c23 = sqrt(rowSums((p2 - p3) ^ 2))
c31 = sqrt(rowSums((p3 - p1) ^ 2))
c = c(c12, c23, c31)
df = data.frame('value' = c,
'constraint' = rep(c('p1-p2', 'p2-p3', 'p3-p1'), rep(T, 3)),
't' = rep(1:T, 3))
return(df)
}
library(CVXR)
A = matrix(0, T-1, T)
diag(A) = -1
diag(A[,-1]) = 1
n.iter = 2
n.seed = 2
df.objs = c()
df.constrs = c()
df.solutions = c()
for(seed in 1:n.seed){
set.seed(seed)
#initialize
p1 = matrix(rnorm(T*2), T, 2)
p2 = matrix(rnorm(T*2), T, 2)
p3 = matrix(rnorm(T*2), T, 2)
objs = rep(0, n.iter)
constrs = c()
for(i in 1:n.iter){
upd = update(p1,p2,p3)
p1 = upd$p1
p2 = upd$p2
p3 = upd$p3
objs[i] = loss(p1, p2, p3)
constrs = rbind(constrs,
data.frame(a.constraint(p1, p2, p3),
'iter' = factor(i, levels = 1:n.iter)))
}
df.objs = rbind(df.objs,
data.frame('objective' = objs,
'iter' = 1:n.iter,
'seed' = factor(seed, levels = 1:n.seed)))
df.constrs = rbind(df.constrs,
data.frame(constrs,
'seed' = factor(seed, levels = 1:n.seed)))
p = rbind(p1, p2, p3)
colnames(p) = c('x1', 'x2')
df.solutions = rbind(df.solutions,
data.frame(p, 't' = rep(1:T, 3),
'vehicle' = factor(rep(1:3, rep(T, 3)), levels = 1:3),
'seed' = factor(seed, levels = 1:n.seed)))
}
library(ggplot2)
ggplot(df.objs, aes(x = iter, y = log(objective), group = seed, color = seed))+
geom_line()
library(ggplot2)
plt = ggplot(df.constrs, aes(x = t, y = value, group = seed:iter,
color = seed, alpha = iter))+
ylim(0, 3)+
geom_line()+
facet_grid(cols = vars(constraint), rows = vars(seed))+
geom_hline(aes(yintercept = D), color = 'black', size = 1, linetype = 'dashed')
suppressWarnings(print(plt))
seed.best = 1
df.best = subset(df.solutions, seed == seed.best)
ggplot(df.best, aes(x = x1, y = x2, group = vehicle, color = vehicle))+
geom_path()
df.objs
subset(df.objs, iter == n.iter)
which.min(subset(df.objs, iter == n.iter))
which.min(subset(df.objs, iter == n.iter)$objective)
seed.best = which.min(subset(df.objs, iter == n.iter)$objective)
df.best = subset(df.solutions, seed == seed.best)
ggplot(df.best, aes(x = x1, y = x2, group = vehicle, color = vehicle))+
geom_path()
df.best
p1.best = subset(df.best, vehicle == 1)
p2.best = subset(df.best, vehicle == 2)
p3.best = subset(df.best, vehicle == 3)
sqrt(rowSums((p1.best - p2.best)^2))
(p1.best - p2.best)^2
p1.best = subset(df.best, vehicle == 1)[,c('x1', 'x2')]
p2.best = subset(df.best, vehicle == 2)[,c('x1', 'x2')]
p3.best = subset(df.best, vehicle == 3)[,c('x1', 'x2')]
inter.vec.dist = sqrt(rowSums((p1.best - p2.best)^2))
inter.vec.dist
cbind(iv.dist12, iv.dist23, iv.dist31)
p1.best = subset(df.best, vehicle == 1)[,c('x1', 'x2')]
p2.best = subset(df.best, vehicle == 2)[,c('x1', 'x2')]
p3.best = subset(df.best, vehicle == 3)[,c('x1', 'x2')]
iv.dist12 = sqrt(rowSums((p1.best - p2.best)^2))
iv.dist31 = sqrt(rowSums((p3.best - p1.best)^2))
cbind(iv.dist12, iv.dist23, iv.dist31)
iv.dist23 = sqrt(rowSums((p2.best - p3.best)^2))
cbind(iv.dist12, iv.dist23, iv.dist31)
apply(cbind(iv.dist12, iv.dist23, iv.dist31), min)
?lapply
?sapply
?mapply
?apply
?lapply
iv.dist = cbind(iv.dist12, iv.dist23, iv.dist31)
apply(iv.dist, 2, min)
apply(iv.dist, 1, min)
seed.best = which.min(subset(df.objs, iter == n.iter)$objective)
df.best = subset(df.solutions, seed == seed.best)
p1.best = subset(df.best, vehicle == 1)[,c('x1', 'x2')]
p2.best = subset(df.best, vehicle == 2)[,c('x1', 'x2')]
p3.best = subset(df.best, vehicle == 3)[,c('x1', 'x2')]
iv.dist12 = sqrt(rowSums((p1.best - p2.best)^2))
iv.dist23 = sqrt(rowSums((p2.best - p3.best)^2))
iv.dist31 = sqrt(rowSums((p3.best - p1.best)^2))
iv.dist = cbind(iv.dist12, iv.dist23, iv.dist31)
iv.dist.min = apply(iv.dist, 1, min)
df.dist = data.frame('distance' = iv.dist.min, 't' = 1:T)
ggplot(df.dist, aes(x = t, y = distance))+
geom_path()
seed.best = which.min(subset(df.objs, iter == n.iter)$objective)
df.best = subset(df.solutions, seed == seed.best)
p1.best = subset(df.best, vehicle == 1)[,c('x1', 'x2')]
p2.best = subset(df.best, vehicle == 2)[,c('x1', 'x2')]
p3.best = subset(df.best, vehicle == 3)[,c('x1', 'x2')]
iv.dist12 = sqrt(rowSums((p1.best - p2.best)^2))
iv.dist23 = sqrt(rowSums((p2.best - p3.best)^2))
iv.dist31 = sqrt(rowSums((p3.best - p1.best)^2))
iv.dist = cbind(iv.dist12, iv.dist23, iv.dist31)
iv.dist.min = apply(iv.dist, 1, min)
df.dist = data.frame('distance' = iv.dist.min, 't' = 1:T)
ggplot(df.dist, aes(x = t, y = distance))+
geom_line(, color = 'orange')+
geom_hline(aes(yintercept = D), color = 'black', size = 1, linetype = 'dashed')
seed.best = which.min(subset(df.objs, iter == n.iter)$objective)
df.best = subset(df.solutions, seed == seed.best)
p1.best = subset(df.best, vehicle == 1)[,c('x1', 'x2')]
p2.best = subset(df.best, vehicle == 2)[,c('x1', 'x2')]
p3.best = subset(df.best, vehicle == 3)[,c('x1', 'x2')]
iv.dist12 = sqrt(rowSums((p1.best - p2.best)^2))
iv.dist23 = sqrt(rowSums((p2.best - p3.best)^2))
iv.dist31 = sqrt(rowSums((p3.best - p1.best)^2))
iv.dist = cbind(iv.dist12, iv.dist23, iv.dist31)
iv.dist.min = apply(iv.dist, 1, min)
df.dist = data.frame('distance' = iv.dist.min, 't' = 1:T)
ggplot(df.dist, aes(x = t, y = distance))+
geom_line(color = 'orange')+
geom_hline(aes(yintercept = D), color = 'black', size = 1, linetype = 'dashed')
ggplot(df.best, aes(x = x1, y = x2, group = vehicle, color = vehicle))+
geom_path()+
geom_points()
ggplot(df.best, aes(x = x1, y = x2, group = vehicle, color = vehicle))+
geom_path()+
geom_point()
poisms = PoisMS(C, H, alpha, beta, X0 = NULL, eps_wpcms = 1e-4, maxiter = 100, verbose_wpcms = TRUE, eps_poisms = 1e-5, maxepoch = 200, verbose_poisms = TRUE)
poisms$plot['coef']
#visualize(poisms$X, index, type = '3D')
# Check slice
dX = H %*% matrix(rnorm(df * 3), df, 3)
slice(poisms$X, dX, poisms$alpha, poisms$beta, epss = seq(-1, 1, 0.1))
library(splines)
library(fields)
library(ggplot2)
library(htmlwidgets)
library(glmnet)
library(vegan)
source('Visualize.R')
source('WPCMS2.R')
source('PoisMS.R')
# Real data
# Load data
load("IMR90_100kb_chr20.rda")
C = data.matrix(IMR90_100kb_chr20)
index = which(colSums(C) != 0)
C = C[index, index]
image.plot(C, xaxt='n', yaxt = 'n')
n_obs = length(index)
n = ncol(C)
# Set parameters
alpha = 1
beta = max(log(C+1))
df = 100
H = load_H(df, index)
H = qr.Q(qr(H))
# Run PoisMS
poisms = PoisMS(C, H, alpha, beta, X0 = NULL, eps_wpcms = 1e-4, maxiter = 100, verbose_wpcms = TRUE, eps_poisms = 1e-5, maxepoch = 200, verbose_poisms = TRUE)
poisms$plot['coef']
#visualize(poisms$X, index, type = '3D')
# Check slice
dX = H %*% matrix(rnorm(df * 3), df, 3)
slice(poisms$X, dX, poisms$alpha, poisms$beta, epss = seq(-1, 1, 0.1))
library(splines)
library(fields)
library(ggplot2)
library(htmlwidgets)
library(glmnet)
library(vegan)
source('Visualize.R')
source('WPCMS2.R')
source('PoisMS.R')
# Real data
# Load data
load("IMR90_100kb_chr20.rda")
C = data.matrix(IMR90_100kb_chr20)
index = which(colSums(C) != 0)
C = C[index, index]
image.plot(C, xaxt='n', yaxt = 'n')
n_obs = length(index)
n = ncol(C)
# Set parameters
alpha = 1
beta = max(log(C+1))
df = 100
H = load_H(df, index)
H = qr.Q(qr(H))
# Run PoisMS
poisms = PoisMS(C, H, alpha, beta, X0 = NULL, eps_wpcms = 1e-4, maxiter = 100, verbose_wpcms = TRUE, eps_poisms = 1e-5, maxepoch = 200, verbose_poisms = TRUE)
library(splines)
library(fields)
library(ggplot2)
library(htmlwidgets)
library(glmnet)
library(vegan)
source('Visualize.R')
source('WPCMS2.R')
source('PoisMS.R')
# Real data
# Load data
load("IMR90_100kb_chr20.rda")
C = data.matrix(IMR90_100kb_chr20)
index = which(colSums(C) != 0)
C = C[index, index]
image.plot(C, xaxt='n', yaxt = 'n')
n_obs = length(index)
n = ncol(C)
# Set parameters
alpha = 1
beta = max(log(C+1))
df = 100
H = load_H(df, index)
H = qr.Q(qr(H))
# Run PoisMS
poisms = PoisMS(C, H, alpha, beta, X0 = NULL, eps_wpcms = 1e-4, maxiter = 100, verbose_wpcms = TRUE, eps_poisms = 1e-5, maxepoch = 200, verbose_poisms = TRUE)
library(splines)
library(fields)
library(ggplot2)
library(htmlwidgets)
library(glmnet)
library(vegan)
source('Visualize.R')
source('WPCMS2.R')
source('PoisMS.R')
setwd('C:/Users/pc/Desktop/Git'); devtools::document(); setwd('/PoisMS'); devtools.install('PoisMS')
setwd('C:/Users/pc/Desktop/Git/PoisMS'); devtools::document(); setwd('C:/Users/pc/Desktop/Git'); devtools.install('PosMS')
setwd('C:/Users/pc/Desktop/Git/PoisMS'); devtools::document(); setwd('C:/Users/pc/Desktop/Git'); devtools::install('PosMS')
setwd('C:/Users/pc/Desktop/Git/PoisMS'); devtools::document(); setwd('C:/Users/pc/Desktop/Git'); devtools::install('PoisMS')
?PoisMS
?PCMS
?WPCMS
?PCMS
?PoisMS
?PoisMS::PCMS
data(C)
#transform contact counts to distances
Z = 1/(C+1)
#create spline basis matrix
H = splines::bs(1:ncol(C), df = 5)
#orthogonalize H using QR decomposition
H = qr.Q(qr(H))
#run WPCMS with equal weights
wpcms = WPCMS(Z, H)
#plot contact matrix approximation
visualize(X, type = 'heatmap')
#plot projection of reconstructed chromatin conformation
visualize(X, type = 'projection')
#plot 3D model of reconstructed chromatin conformation
visualize(X, type = '3D')
?PoisMS
library(PoisMS)
?PoisMS
?PoisMS
?PoisMS
?PoisMS
?PoisMS
data(C)
#'
#' #transform contact counts to distances
#' Z = 1/(C+1)
#'
#' #create spline basis matrix
#' H = splines::bs(1:ncol(C), df = 5)
#'
#' #orthogonalize H using QR decomposition
#' H = qr.Q(qr(H))
#'
#' #run WPCMS with equal weights
#' wpcms = WPCMS(Z, H)
#'
#' #plot contact matrix approximation
#' visualize(wpcms$X, wpcms$beta, type = 'heatmap')
#'
#' #plot projection of reconstructed chromatin conformation
#' visualize(wpcms$X, wpcms$beta, type = 'projection')
#'
#' #plot 3D model of reconstructed chromatin conformation
#' visualize(wpcms$X, wpcms$beta, type = '3D')
visualize(wpcms$X, wpcms$beta, type = 'heatmap')
visualize(wpcms$X, wpcms$beta, type = 'projection')
visualize(wpcms$X, wpcms$beta, type = '3D')
data(C)
#'
#' #transform contact counts to similarities
#' D = 1/(C+1)
#' Z = -D^2/2
#' Z = scale(Z, scale = FALSE, center = TRUE)
#' Z = t(scale(t(Z), scale = FALSE, center = TRUE))
#'
#' #create spline basis matrix
#' H = splines::bs(1:ncol(C), df = 5)
#'
#' #orthogonalize H using QR decomposition
#' H = qr.Q(qr(H))
PCMS(Z, H)$X
Z
ED = eigen(t(H) %*% Z %*% H, symmetric = TRUE)
U3 = ED$vectors[,1:3]
d3 = ED$values[1:3]
d3
d3 = pmax(d3, 0)
d3
data(C)
#'
#' #transform contact counts to distances
#' Z = 1/(C+1)
#'
#' #create spline basis matrix
#' H = splines::bs(1:ncol(C), df = 5)
#'
#' #orthogonalize H using QR decomposition
#' H = qr.Q(qr(H))
#'
#' #run WPCMS with equal weights; no intercept
#' WPCMS(Z, H, beta = 0)$X
#'
Z = 1/(C+1)
H = splines::bs(1:ncol(C), df = 5)
H = qr.Q(qr(H))
WPCMS(Z, H, beta = 0)$X
WPCMS(Z, H, beta = 0)
W = matrix(runif(length(Z)), dim(Z))
WPCMS(Z, H, W)$X
WPCMS(Z, H, W)
W
WPCMS(Z, H, beta = 0)$X
H
H = qr.Q(qr(H))
H
WPCMS(Z, H, beta = 0)$X
WPCMS(Z, H, beta = 1)$X
WPCMS(Z, H, beta = 3)$X
WPCMS(Z, H, beta = 0)$X
WPCMS(C, H, beta = 0)$X
data(C)
H = splines::bs(1:ncol(C), df = 5)
H = qr.Q(qr(H))
WPCMS(C, H, beta = 0)$X
WPCMS(C, H, beta = 0)
WPCMS(C, H, beta = 0)$plot
WPCMS(C, H, beta = 0)$plot['objective']
W = matrix(runif(length(C)), dim(C))
WPCMS(C, H, W)$X
WPCMS(Z, H, beta = 0)$X
Z
WPCMS(Z, H, beta = mean(Z))$X
WPCMS(Z, H, beta = 0, W)$X
WPCMS(Z, H)$X
W = matrix(runif(length(Z)), dim(Z))
WPCMS(Z, H, W, beta = 0)$X
W = matrix(runif(length(Z)), dim(Z))
WPCMS(Z, H, W, beta = 0)$X
W = matrix(runif(length(Z)), dim(Z))
WPCMS(Z, H, W, beta = 0)$X
W = matrix(runif(length(Z)), dim(Z))
WPCMS(Z, H, W, beta = 0)$X
WPCMS(Z, H, W, beta = 0)$X
W = matrix(runif(length(Z)), dim(Z))
WPCMS(Z, H, W, beta = 0)$X
W = matrix(runif(length(Z)), dim(Z))
WPCMS(Z, H, W, beta = 10)$X
WPCMS(Z, H, W, beta = 1)$X
PoisMS(C, H, beta = 0)$X
PoisMS(C, H, beta = 0)
PoisMS(C, H, beta = 1)
PoisMS(C, H, beta = 10)
setwd('C:/Users/pc/Desktop/Git/PoisMS'); devtools::document(); setwd('C:/Users/pc/Desktop/Git'); devtools::install('PoisMS')
PoisMS(C, H, beta = 0)
PoisMS(C, H, beta = 10)
PoisMS(C, H)
setwd('C:/Users/pc/Desktop/Git/PoisMS'); devtools::document(); setwd('C:/Users/pc/Desktop/Git'); devtools::install('PoisMS')
setwd('C:/Users/pc/Desktop/Git/PoisMS'); devtools::document(); setwd('C:/Users/pc/Desktop/Git'); devtools::install('PoisMS')
setwd('C:/Users/pc/Desktop/Git/PoisMS'); devtools::document(); setwd('C:/Users/pc/Desktop/Git'); devtools::install('PoisMS')
install.packages('fields')
install.packages("fields")
setwd('C:/Users/pc/Desktop/Git/PoisMS'); devtools::document(); setwd('C:/Users/pc/Desktop/Git'); devtools::install('PoisMS')
install.packages("fields")
setwd('C:/Users/pc/Desktop/Git/PoisMS'); devtools::document(); setwd('C:/Users/pc/Desktop/Git'); devtools::install('PoisMS')
?fields
remove.packages('fields')
install.packages('fields')
