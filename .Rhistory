load("C:/Users/pc/Desktop/PoisMS/data/H.rda")
View(H)
View(H)
library(splines)
bs(1:20)
bs(1:20, df = 5)
devtools::install_git('https://github.com/ElenaTuzhilina/PoisMS')
library(PoisMS)
PoisMS::H
devtools::install_git('https://github.com/ElenaTuzhilina/PoisMS')
devtools::install_git('https://github.com/ElenaTuzhilina/PoisMS')
setwd()
setwd('..')
devtools::document()
devtools::install_git('https://github.com/ElenaTuzhilina/PoisMS')
devtools::install_git('https://github.com/ElenaTuzhilina/PoisMS')
PoisMS::C
?PoisMS
data(C)
#create spline basis matrix
H = bs(1:ncol(C), df = 5)
#orthogonalize H using QR decomposition
H = qr.Q(qr(H))
#run PoisMS approach
PoisMS(C, H)$X
?visualize
X = PoisMS(C, H)$X
#plot contact matrix approximation
visualize(X, type = 'heatmap')
#plot contact matrix approximation
visualize(X, type = '3D')
#plot contact matrix approximation
visualize(X, type = 'projection')
?WPCMS
#create spline basis matrix
H = bs(1:ncol(C), df = 5)
#orthogonalize H using QR decomposition
H = qr.Q(qr(H))
#W = NULL, the PCMS solution is calculated
WPCMS(C, H)$X
#WPCMS solution for some random weights matrix W
W = matrix(runif(length(C)), dim(C))
WPCMS(C, H, W)$X
#create spline basis matrix
H = bs(1:ncol(C), df = 5)
#orthogonalize H using QR decomposition
H = qr.Q(qr(H))
#W = NULL, the PCMS solution is calculated
WPCMS(C, H)$X
#WPCMS solution for some random weights matrix W
W = matrix(runif(length(C)), dim(C))
X = WPCMS(C, H, W)$X
#plot contact matrix approximation
visualize(X, type = 'projection')
#plot contact matrix approximation
visualize(X, type = 'projection')
