solutions = data.frame(solutions, col)
ggplot(solutions, aes(X1, X2))+
geom_point(color = col)+
geom_line(color = col)+
facet_grid(rows = vars(DF), cols = vars(method))
solutions
solutions$col
library(ggplot2)
before_centromere = which(index < (n * 0.45))
after_centromere = which(index >= (n * 0.45))
col = c(rep('orange', length(before_centromere)), rep('darkturquoise', length(after_centromere)))
#solutions = data.frame(solutions, col)
ggplot(solutions, aes(X1, X2))+
geom_point(color = solutions$col)+
geom_line(color = solutions$col)+
facet_grid(rows = vars(DF), cols = vars(method))
library(ggplot2)
before_centromere = which(index < (n * 0.45))
after_centromere = which(index >= (n * 0.45))
col = c(rep('orange', length(before_centromere)), rep('darkturquoise', length(after_centromere)))
#solutions = data.frame(solutions, col)
ggplot(solutions, aes(X1, X2))+
geom_point(color = solutions$col)+
geom_path(color = solutions$col)+
facet_grid(rows = vars(DF), cols = vars(method))
library(ggplot2)
before_centromere = which(index < (n * 0.45))
after_centromere = which(index >= (n * 0.45))
col = c(rep('orange', length(before_centromere)), rep('darkturquoise', length(after_centromere)))
#solutions = data.frame(solutions, col)
ggplot(solutions, aes(X1, X2))+
geom_point(color = solutions$col)+
geom_path(color = solutions$col)+
facet_grid(rows = vars(DF), cols = vars(method))+
xlab('x')+
ylab('y')
library(ggplot2)
before_centromere = which(index < (n * 0.45))
after_centromere = which(index >= (n * 0.45))
col = c(rep('orange', length(before_centromere)), rep('darkturquoise', length(after_centromere)))
#solutions = data.frame(solutions, col)
solutions$df = paste('df =', solutions$df)
ggplot(solutions, aes(X1, X2))+
geom_point(color = solutions$col)+
geom_path(color = solutions$col)+
facet_grid(rows = vars(DF), cols = vars(method))+
xlab('x')+
ylab('y')
library(ggplot2)
before_centromere = which(index < (n * 0.45))
after_centromere = which(index >= (n * 0.45))
col = c(rep('orange', length(before_centromere)), rep('darkturquoise', length(after_centromere)))
#solutions = data.frame(solutions, col)
solutions$DF = paste('df =', solutions$DF)
ggplot(solutions, aes(X1, X2))+
geom_point(color = solutions$col)+
geom_path(color = solutions$col)+
facet_grid(rows = vars(DF), cols = vars(method))+
xlab('x')+
ylab('y')
library(ggplot2)
before_centromere = which(index < (n * 0.45))
after_centromere = which(index >= (n * 0.45))
col = c(rep('orange', length(before_centromere)), rep('darkturquoise', length(after_centromere)))
#solutions = data.frame(solutions, col)
solutions$DF = paste('df =', solutions$DF)
ggplot(solutions, aes(X1, X2))+
geom_point(color = solutions$col)+
geom_path(color = solutions$col)+
facet_grid(rows = vars(DF), cols = vars(method))+
xlab('x')+
ylab('y')+
theme_bw()
library(ggplot2)
before_centromere = which(index < (n * 0.45))
after_centromere = which(index >= (n * 0.45))
col = c(rep('orange', length(before_centromere)), rep('darkturquoise', length(after_centromere)))
#solutions = data.frame(solutions, col)
#solutions$DF = paste('df =', solutions$DF)
ggplot(solutions, aes(X1, X2))+
geom_point(color = solutions$col)+
geom_path(color = solutions$col)+
facet_grid(rows = vars(DF), cols = vars(method), scales = 'free')+
xlab('x')+
ylab('y')+
theme_bw()
library(ggplot2)
before_centromere = which(index < (n * 0.45))
after_centromere = which(index >= (n * 0.45))
col = c(rep('orange', length(before_centromere)), rep('darkturquoise', length(after_centromere)))
solutions = data.frame(solutions, col)
solutions$DF = factor(paste('df =', solutions$DF), levels = paste('df =', dfs))
ggplot(solutions, aes(X1, X2))+
geom_point(color = solutions$col)+
geom_path(color = solutions$col)+
facet_grid(rows = vars(DF), cols = vars(method), scales = 'free')+
xlab('x')+
ylab('y')+
theme_bw()
levels = paste('df =', dfs)
levels
solutions$DF
dfs = c(10, 25, 50, 100, 150, 200)
solutions = c()
for(df in dfs){
H = load_H(df, index)
H = qr.Q(qr(H))
solutions = rbind(solutions, data.frame(WPCMS(Clog, H, W = NULL)$X, 'DF' = df, 'method' = 'PCMS'))
solutions = rbind(solutions, data.frame(WPCMS(Clog, H, W = NULL)$X, 'DF' = df, 'method' = 'PoisMS'))
#solutions = rbind(solutions, data.frame(PoisMS(C, H, alpha, beta, eps_wpcms = 1e-7, eps_poisms = 1e-6)$X, 'DF' = df, 'method' = 'PoisMS'))
}
for(df in dfs){
par(mar = c(1, 2, 1, 2), mfrow = c(1,2))
visualize(as.matrix(subset(solutions, method == 'PCMS' & DF == df)[,1:3]), index, type = 'heatmap', title = paste('PCMS, df =', df))
visualize(as.matrix(subset(solutions, method == 'PoisMS' & DF == df)[,1:3]), index, type = 'heatmap', title = paste('PoisMS, df =', df))
}
library(ggplot2)
before_centromere = which(index < (n * 0.45))
after_centromere = which(index >= (n * 0.45))
col = c(rep('orange', length(before_centromere)), rep('darkturquoise', length(after_centromere)))
solutions = data.frame(solutions, col)
solutions$DF = factor(paste('df =', solutions$DF), levels = paste('df =', dfs))
ggplot(solutions, aes(X1, X2))+
geom_point(color = solutions$col)+
geom_path(color = solutions$col)+
facet_grid(rows = vars(DF), cols = vars(method), scales = 'free')+
xlab('x')+
ylab('y')+
theme_bw()
load("C:/Users/pc/Dropbox/ChromatinPC/elena/Code/Data/IMR90_primary_intra_25kb_chr20.fr.RData")
load("C:/Users/pc/Dropbox/ChromatinPC/elena/Code/Data/IMR90_primary_intra_25kb_chr21.fr.RData")
load("C:/Users/pc/Dropbox/ChromatinPC/elena/Code/Data/IMR90_primary_intra_50kb_chr20.fr.RData")
load("C:/Users/pc/Dropbox/ChromatinPC/elena/Code/Data/IMR90_primary_intra_50kb_chr21.fr.RData")
IMR90_primary_intra_25kb_chr20.fr
IMR90_50kb_chr20 = get('IMR90_primary_intra_50kb_chr20.fr')
colnames(IMR90_50kb_chr20) = c()
IMR90_50kb_chr20 = data.matrix(IMR90_50kb_chr20[,-c(1,2)])
IMR90_50kb_chr20
dim(IMR90_50kb_chr20)
IMR90_50kb_chr20[1,1]
load("C:/Users/pc/Dropbox/ChromatinPC/elena/Code/Data/IMR90_primary_intra_100kb_chr20.fr.RData")
load("C:/Users/pc/Dropbox/ChromatinPC/elena/Code/Data/IMR90_primary_intra_100kb_chr21.fr.RData")
View(IMR90_primary_intra_25kb_chr20.fr)
C_25kb_chr20 = get('IMR90_primary_intra_25kb_chr20.fr')
colnames(C_25kb_chr20) = c()
C_25kb_chr20 = data.matrix(C_25kb_chr20[,-c(1,2)])
C_25kb_chr21 = get('IMR90_primary_intra_25kb_chr21.fr')
colnames(C_25kb_chr21) = c()
C_25kb_chr21 = data.matrix(C_25kb_chr21[,-c(1,2)])
C_50kb_chr20 = get('IMR90_primary_intra_50kb_chr20.fr')
colnames(C_50kb_chr20) = c()
C_50kb_chr20 = data.matrix(C_50kb_chr20[,-c(1,2)])
C_50kb_chr21 = get('IMR90_primary_intra_50kb_chr21.fr')
colnames(C_50kb_chr21) = c()
C_50kb_chr21 = data.matrix(C_50kb_chr21[,-c(1,2)])
C_100kb_chr20 = get('IMR90_primary_intra_100kb_chr20.fr')
colnames(C_100kb_chr20) = c()
C_100kb_chr20 = data.matrix(C_100kb_chr20[,-c(1,2)])
C_100kb_chr21 = get('IMR90_primary_intra_100kb_chr21.fr')
colnames(C_100kb_chr21) = c()
C_100kb_chr21 = data.matrix(C_100kb_chr21[,-c(1,2)])
IMR90_50kb_chr20 = data.matrix(IMR90_50kb_chr20[,-c(1,2)])
save(C_25kb_chr20, C_25kb_chr21, C_50kb_chr20, C_50kb_chr21, C_100kb_chr20, C_100kb_chr21, file = "HiC.rda")
setwd('C:/Users/pc/Desktop/Git/PoisMS/data')
save(C_25kb_chr20, C_25kb_chr21, C_50kb_chr20, C_50kb_chr21, C_100kb_chr20, C_100kb_chr21, file = "HiC.rda")
View(C_100kb_chr21)
load("C:/Users/pc/Desktop/Git/PoisMS/data/HiC.rda")
load("C:/Users/pc/Desktop/Git/PoisMS/data/HiC.rda")
setwd('..')
devtools::document()
devtools::document()
load("C:/Users/pc/Desktop/Git/PoisMS/data/HiC.rda")
load("C:/Users/pc/Desktop/Git/PoisMS/data/HiC.rda")
devtools::document()
setwd('../data')
setwd('data')
data(HiC)
HiC
data(HiC)
C_100kb_chr20
C_100kb_chr21
C_50kb_chr21
setwd('..')
devtools::document()
HiC$C_100kb_chr20
setwd('data')
IMR90_25kb_chr20 = C_25kb_chr20
saveIMR90_25kb_chr20, file = "IMR90_25kb_chr20rda")
IMR90_25kb_chr20 = C_25kb_chr20
save(IMR90_25kb_chr20, file = "IMR90_25kb_chr20.rda")
IMR90_50kb_chr20 = C_50kb_chr20
save(IMR90_50kb_chr20, file = "IMR90_50kb_chr20.rda")
IMR90_100kb_chr20 = C_100kb_chr20
save(IMR90_100kb_chr20, file = "IMR90_100kb_chr20.rda")
IMR90_100kb_chr21 = C_100kb_chr21
save(IMR90_100kb_chr21, file = "IMR90_100kb_chr21.rda")
IMR90_50kb_chr21 = C_50kb_chr21
save(IMR90_50kb_chr21, file = "IMR90_50kb_chr21.rda")
IMR90_25kb_chr21 = C_25kb_chr21
save(IMR90_25kb_chr21, file = "IMR90_25kb_chr21.rda")
IMR90_25kb_chr20
dim(IMR90_25kb_chr20)
dim(IMR90_25kb_chr21)
dim(IMR90_50kb_chr20)
dim(IMR90_50kb_chr21)
dim(IMR90_100kb_chr20)
dim(IMR90_100kb_chr21)
setwd('..')
devtools::document()
devtools::install_git('https://github.com/ElenaTuzhilina/PoisMS')
?PoisMS
?IMR90_100kb_chr20
?C
devtools::document()
devtools::install_git('https://github.com/ElenaTuzhilina/PoisMS')
library(PoisMS)
?C
?IMR90_100kb_chr20
library(PoisMS)
data(IMR90_100kb_chr20)
C = data.matrix(IMR90_100kb_chr20)
n = ncol(C)
library(fields)
alpha = 1
eps = 0.001
beta = log(mean(C))
Clog = (log(C + eps) - beta)/alpha
par(mar = c(0, 2, 1, 2))
image.plot(Clog, xaxt='n', yaxt = 'n', mar = c(0, 2, 1, 2))
devtools::install_git('https://github.com/ElenaTuzhilina/PoisMS')
devtools::use_vignette("PoisMS-vignette")
devtools::install_github('https://github.com/ElenaTuzhilina/PoisMS', build_vignettes = TRUE)
devtools::install_github('https://github.com/ElenaTuzhilina/PoisMS', build_vignettes = TRUE, force = TRUE)
visualize(solution_PCMS$X, index, type = '3D')
library(PoisMS)
data(IMR90_100kb_chr20)
C = data.matrix(IMR90_100kb_chr20)
n = ncol(C)
library(fields)
alpha = 1
eps = 0.001
beta = log(mean(C))
Clog = (log(C + eps) - beta)/alpha
par(mar = c(0, 2, 1, 2))
image.plot(Clog, xaxt='n', yaxt = 'n', mar = c(0, 2, 1, 2))
index = which(diag(C) != 0)
n_obs = length(index)
par(mar = c(0, 2, 1, 2))
Clog = Clog[index, index]
image.plot(Clog, xaxt='n', yaxt = 'n')
library(splines)
load_H = function(df, index){
n_knots = df - 2
knots = unique(seq(from = 1, to = max(index), length = n_knots))
knots = knots[-c(1,n_knots)]
H = bs(index, knots = knots, intercept = TRUE)
return(H)
}
H = load_H(20, index)
par(mar = c(2, 5, 0, 2))
matplot(H, type = 'l', lwd = 2)
H = qr.Q(qr(H))
solution_PCMS = WPCMS(Clog, H, W = NULL)
cat('Optimal loss value is', solution_PCMS$loss)
par(mar = c(0, 2, 1, 2))
visualize(solution_PCMS$X, index, type = 'heatmap')
visualize(solution_PCMS$X, index, type = 'projection')
visualize(solution_PCMS$X, index, type = '3D')
visualize(solution_PCMS$X, index, type = '3D')%>%layout(title = 'df = 10')
library(dplyr)
visualize(solution_PCMS$X, index, type = '3D')%>%layout(title = 'df = 10')
library(dplyr)
visualize(solution_PCMS$X, index, type = '3D')%>%layout(title = "df")
library(dplyr)
visualize(solution_PCMS$X, index, type = '3D') %>% layout(title = "df")
library(dplyr)
visualize(solution_PCMS$X, index, type = '3D') %>% layout(title = "df", scene = list(
xaxis = list(title = "Cos"),
yaxis = list(title = "Sin"),
zaxis = list(title = "Z")
))
library(dplyr)
visualize(solution_PCMS$X, index, type = '3D')
for(df in dfs){
par(mar = c(1, 2, 1, 2), mfrow = c(1,2))
visualize(as.matrix(subset(solutions, method == 'PCMS' & DF == df)[,1:3]), index, type = 'heatmap', title = paste('PCMS, df =', df))
visualize(as.matrix(subset(solutions, method == 'PoisMS' & DF == df)[,1:3]), index, type = 'heatmap', title = paste('PoisMS, df =', df))
}
library(dplyr)
p = visualize(solution_PCMS$X, index, type = '3D')
p %>% layout(title = '11')
library(dplyr)
p = visualize(solution_PCMS$X, index, type = '3D')
p %>% plotly::layout(title = '11')
library(dplyr)
visualize(solution_PCMS$X, index, type = '3D') %>% plotly::layout(title = '11')
library(dplyr)
visualize(solution_PCMS$X, index, type = '3D', plotly::layout(title = '11'))
library(dplyr)
plotly::layout(visualize(solution_PCMS$X, index, type = '3D'), title = '11')
devtools::install_git('https://github.com/ElenaTuzhilina/PoisMS')
library(PoisMS)
data(IMR90_100kb_chr20)
C = data.matrix(IMR90_100kb_chr20)
n = ncol(C)
library(fields)
alpha = 1
eps = 0.001
beta = log(mean(C))
Clog = (log(C + eps) - beta)/alpha
par(mar = c(0, 2, 1, 2))
image.plot(Clog, xaxt='n', yaxt = 'n', mar = c(0, 2, 1, 2))
n_obs = length(index)
index = which(diag(C) != 0)
n_obs = length(index)
par(mar = c(0, 2, 1, 2))
Clog = Clog[index, index]
image.plot(Clog, xaxt='n', yaxt = 'n')
library(splines)
load_H = function(df, index){
n_knots = df - 2
knots = unique(seq(from = 1, to = max(index), length = n_knots))
knots = knots[-c(1,n_knots)]
H = bs(index, knots = knots, intercept = TRUE)
return(H)
}
H = load_H(20, index)
par(mar = c(2, 5, 0, 2))
matplot(H, type = 'l', lwd = 2)
H = qr.Q(qr(H))
solution_PCMS = WPCMS(Clog, H, W = NULL)
cat('Optimal loss value is', solution_PCMS$loss)
par(mar = c(0, 2, 1, 2))
visualize(solution_PCMS$X, index, type = 'heatmap')
visualize(solution_PCMS$X, index, type = 'projection')
library(dplyr)
visualize(solution_PCMS$X, index, type = '3D', title = '11')
library(dplyr)
visualize(solution_PCMS$X, index, type = '3D', title = '100')
library(dplyr)
visualize(solution_PCMS$X, index, type = '3D')
devtools::document()
devtools::install_git(https://github.com/ElenaTuzhilina/PoisMS)
devtools::install_git('https://github.com/ElenaTuzhilina/PoisMS')
library(PoisMS)
data(IMR90_100kb_chr20)
C = data.matrix(IMR90_100kb_chr20)
n = ncol(C)
library(dplyr)
visualize(solution_PCMS$X, index, type = '3D')
library(dplyr)
visualize(solution_PCMS$X, index, type = '3D', title = '1')
library(dplyr)
visualize(solution_PCMS$X, index, type = '3D')
library(PoisMS)
data(IMR90_100kb_chr20)
C = data.matrix(IMR90_100kb_chr20)
n = ncol(C)
library(fields)
alpha = 1
eps = 0.001
beta = log(mean(C))
Clog = (log(C + eps) - beta)/alpha
par(mar = c(0, 2, 1, 2))
image.plot(Clog, xaxt='n', yaxt = 'n', mar = c(0, 2, 1, 2))
index = which(diag(C) != 0)
n_obs = length(index)
par(mar = c(0, 2, 1, 2))
Clog = Clog[index, index]
image.plot(Clog, xaxt='n', yaxt = 'n')
library(splines)
load_H = function(df, index){
n_knots = df - 2
knots = unique(seq(from = 1, to = max(index), length = n_knots))
knots = knots[-c(1,n_knots)]
H = bs(index, knots = knots, intercept = TRUE)
return(H)
}
H = load_H(20, index)
par(mar = c(2, 5, 0, 2))
matplot(H, type = 'l', lwd = 2)
H = qr.Q(qr(H))
solution_PCMS = WPCMS(Clog, H, W = NULL)
cat('Optimal loss value is', solution_PCMS$loss)
par(mar = c(0, 2, 1, 2))
visualize(solution_PCMS$X, index, type = 'heatmap')
visualize(solution_PCMS$X, index, type = 'projection')
visualize(solution_PCMS$X, index, type = '3D')
set.seed(1)
W = matrix(runif(n_obs*n_obs), n_obs, n_obs)
W = (W + t(W))/2
par(mar = c(0, 2, 1, 2))
image.plot(W, xaxt='n', yaxt = 'n')
solution_WPCMS = WPCMS(Clog, H, W = W, verbose = TRUE, eps = 1e-7)
visualize(solution_WPCMS$X, index, type = 'projection')
W = (W > 0.9) * 1
par(mar = c(0, 2, 1, 2))
image.plot(round(W), xaxt='n', yaxt = 'n')
solution_WPCMS = WPCMS(Clog, H, W = W, eps = 1e-7, maxiter = 1000)
cat('Takes', solution_WPCMS$iter, 'iterations to converge')
par(mar = c(0, 2, 1, 2))
visualize(solution_WPCMS$X, index, type = 'heatmap')
dfs = c(10, 25, 50, 100, 150, 200)[6]
solutions = c()
for(df in dfs){
H = load_H(df, index)
H = qr.Q(qr(H))
solutions = rbind(solutions, data.frame(WPCMS(Clog, H, W = NULL)$X, 'DF' = df, 'method' = 'PCMS'))
solutions = rbind(solutions, data.frame(WPCMS(Clog, H, W = NULL)$X, 'DF' = df, 'method' = 'PoisMS'))
#    solutions = rbind(solutions, data.frame(PoisMS(C, H, alpha, beta, eps_wpcms = 1e-7, eps_poisms = 1e-6)$X, 'DF' = df, 'method' = 'PoisMS'))
}
for(df in dfs){
par(mar = c(1, 2, 1, 2), mfrow = c(1,2))
visualize(as.matrix(subset(solutions, method == 'PCMS' & DF == df)[,1:3]), index, type = 'heatmap', title = paste('PCMS, df =', df))
visualize(as.matrix(subset(solutions, method == 'PoisMS' & DF == df)[,1:3]), index, type = 'heatmap', title = paste('PoisMS, df =', df))
}
library(ggplot2)
before_centromere = which(index < (n * 0.45))
after_centromere = which(index >= (n * 0.45))
col = c(rep('orange', length(before_centromere)), rep('darkturquoise', length(after_centromere)))
solutions = data.frame(solutions, col)
solutions$DF = factor(paste('df =', solutions$DF), levels = paste('df =', dfs))
ggplot(solutions, aes(X1, X2))+
geom_point(color = solutions$col)+
geom_path(color = solutions$col)+
facet_grid(rows = vars(DF), cols = vars(method), scales = 'free')+
xlab('x')+
ylab('y')+
theme_bw()
library(ggplot2)
before_centromere = which(index < (n * 0.45))
after_centromere = which(index >= (n * 0.45))
col = c(rep('orange', length(before_centromere)), rep('darkturquoise', length(after_centromere)))
solutions = data.frame(solutions, col)
solutions$DF = factor(paste('df =', solutions$DF), levels = paste('df =', dfs))
ggplot(solutions, aes(X1, X2))+
geom_point(color = solutions$col)+
geom_path(color = solutions$col)+
facet_grid(rows = vars(DF), cols = vars(method), scales = 'free')+
xlab('x')+
ylab('y')+
theme_bw()
visualize(as.matrix(subset(solutions, method == 'PCMS' & DF == 200)[,1:3]), index, type = '3D', title = 'PCMS')
visualize(as.matrix(subset(solutions, method == 'PoisMS' & DF == 200)[,1:3]), index, type = '3D', title = 'PoisMS')
library(ggplot2)
before_centromere = which(index < (n * 0.45))
after_centromere = which(index >= (n * 0.45))
col = c(rep('orange', length(before_centromere)), rep('darkturquoise', length(after_centromere)))
solutions_col = data.frame(solutions, col)
solutions_col$DF = factor(paste('df =', solutions$DF), levels = paste('df =', dfs))
ggplot(solutions, aes(X1, X2))+
geom_point(color = solutions$col)+
geom_path(color = solutions$col)+
facet_grid(rows = vars(DF), cols = vars(method), scales = 'free')+
xlab('x')+
ylab('y')+
theme_bw()
library(ggplot2)
before_centromere = which(index < (n * 0.45))
after_centromere = which(index >= (n * 0.45))
col = c(rep('orange', length(before_centromere)), rep('darkturquoise', length(after_centromere)))
solutions_col = data.frame(solutions, col)
solutions_col$DF = factor(paste('df =', solutions$DF), levels = paste('df =', dfs))
ggplot(solutions_col, aes(X1, X2))+
geom_point(color = solutions_col$col)+
geom_path(color = solutions_col$col)+
facet_grid(rows = vars(DF), cols = vars(method), scales = 'free')+
xlab('x')+
ylab('y')+
theme_bw()
dfs = c(10, 25, 50, 100, 150, 200)
solutions = c()
for(df in dfs){
H = load_H(df, index)
H = qr.Q(qr(H))
solutions = rbind(solutions, data.frame(WPCMS(Clog, H, W = NULL)$X, 'DF' = df, 'method' = 'PCMS'))
solutions = rbind(solutions, data.frame(WPCMS(Clog, H, W = NULL)$X, 'DF' = df, 'method' = 'PoisMS'))
#    solutions = rbind(solutions, data.frame(PoisMS(C, H, alpha, beta, eps_wpcms = 1e-7, eps_poisms = 1e-6)$X, 'DF' = df, 'method' = 'PoisMS'))
}
for(df in dfs){
par(mar = c(1, 2, 1, 2), mfrow = c(1,2))
visualize(as.matrix(subset(solutions, method == 'PCMS' & DF == 10)[,1:3]), index, type = 'heatmap', title = paste('PCMS, df =', df))
visualize(as.matrix(subset(solutions, method == 'PoisMS' & DF == 10)[,1:3]), index, type = 'heatmap', title = paste('PoisMS, df =', df))
}
library(ggplot2)
before_centromere = which(index < (n * 0.45))
after_centromere = which(index >= (n * 0.45))
col = c(rep('orange', length(before_centromere)), rep('darkturquoise', length(after_centromere)))
solutions_col = data.frame(solutions, col)
solutions_col$DF = factor(paste('df =', solutions$DF), levels = paste('df =', dfs))
ggplot(solutions_col, aes(X1, X2))+
geom_point(color = solutions_col$col)+
geom_path(color = solutions_col$col)+
facet_grid(rows = vars(DF), cols = vars(method), scales = 'free')+
xlab('x')+
ylab('y')+
theme_bw()
visualize(as.matrix(subset(solutions, method == 'PCMS' & DF == 10)[,1:3]), index, type = '3D', title = 'PCMS')
visualize(as.matrix(subset(solutions, method == 'PCMS' & DF == 200)[,1:3]), index, type = '3D', title = 'PCMS')
visualize(as.matrix(subset(solutions, method == 'PoisMS' & DF == 200)[,1:3]), index, type = '3D', title = 'PoisMS')
visualize(solution_PoisMS$X, index, type = '3D')
devtools::document()
devtools::document()
devtools::document()
warnings()
warnings()
devtools::document()
warnings()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
